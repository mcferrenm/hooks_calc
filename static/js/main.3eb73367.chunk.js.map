{"version":3,"sources":["components/NumberProvider.js","components/NumberButton.js","components/FunctionButton.js","components/ClearButton.js","components/styles/Styles.js","components/Display.js","components/EqualButton.js","components/BackButton.js","components/NegativeButton.js","components/Calculator.js","App.js","serviceWorker.js","index.js"],"names":["NumberContext","React","createContext","NumberProvider","props","_useState","useState","_useState2","Object","slicedToArray","number","setNumber","_useState3","_useState4","storedNumber","setStoredNumber","_useState5","_useState6","functionType","setFunctionType","handleSetStoredValue","react_default","a","createElement","Provider","value","doMath","concat","Math","round","parseFloat","handleBackButton","deletedNumber","slice","length","handleClearValue","handleSetCalcFunction","type","handleSetDisplayValue","num","includes","replace","handleToggleNegative","positiveNumber","children","NumberButton","_ref","buttonValue","useContext","onClick","FunctionButton","ClearButton","CalculatorStyles","styled","div","_templateObject","DisplayStyles","_templateObject2","Display","_useContext","EqualButton","BackButton","NegativeButton","Calculator","className","components_Display","components_ClearButton","components_BackButton","components_NegativeButton","components_FunctionButton","components_NumberButton","components_EqualButton","App","components_NumberProvider","components_Calculator","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3eb73367.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nexport const NumberContext = React.createContext();\n\nconst NumberProvider = props => {\n  const [number, setNumber] = useState(\"\");\n  const [storedNumber, setStoredNumber] = useState(\"\");\n  const [functionType, setFunctionType] = useState(\"\");\n\n  const handleSetDisplayValue = num => {\n    if (!number.includes(\".\") || num !== \".\") {\n      setNumber(`${(number + num).replace(/^0+/, \"\")}`);\n    }\n  };\n\n  const handleSetStoredValue = () => {\n    setStoredNumber(number);\n    setNumber(\"\");\n  };\n\n  const handleClearValue = () => {\n    setNumber(\"\");\n    setStoredNumber(\"\");\n    setFunctionType(\"\");\n  };\n\n  const handleBackButton = () => {\n    if (number !== \"\") {\n      const deletedNumber = number.slice(0, number.length - 1);\n      setNumber(deletedNumber);\n    }\n  };\n\n  const handleSetCalcFunction = type => {\n    if (number) {\n      setFunctionType(type);\n      handleSetStoredValue();\n    }\n\n    if (storedNumber) {\n      setFunctionType(type);\n    }\n  };\n\n  const handleToggleNegative = () => {\n    if (number) {\n      if (number > 0) {\n        setNumber(`-${number}`);\n      } else {\n        const positiveNumber = number.slice(1);\n        setNumber(positiveNumber);\n      }\n    } else if (storedNumber > 0) {\n      setStoredNumber(`-${storedNumber}`);\n    } else {\n      const positiveNumber = storedNumber.slice(1);\n      setStoredNumber(positiveNumber);\n    }\n  };\n\n  const doMath = () => {\n    if (number && storedNumber) {\n      switch (functionType) {\n        case \"+\":\n          setStoredNumber(\n            `${Math.round(\n              `${(parseFloat(storedNumber) + parseFloat(number)) * 100}`\n            ) / 100}`\n          );\n          break;\n        case \"-\":\n          setStoredNumber(\n            `${Math.round(\n              `${(parseFloat(storedNumber) - parseFloat(number)) * 1000}`\n            ) / 1000}`\n          );\n          break;\n        case \"/\":\n          setStoredNumber(\n            `${Math.round(\n              `${(parseFloat(storedNumber) / parseFloat(number)) * 1000}`\n            ) / 1000}`\n          );\n          break;\n        case \"*\":\n          setStoredNumber(\n            `${Math.round(\n              `${parseFloat(storedNumber) * parseFloat(number) * 1000}`\n            ) / 1000}`\n          );\n          break;\n        default:\n          break;\n      }\n      setNumber(\"\");\n    }\n  };\n\n  return (\n    <NumberContext.Provider\n      value={{\n        doMath,\n        functionType,\n        handleBackButton,\n        handleClearValue,\n        handleSetCalcFunction,\n        handleSetDisplayValue,\n        handleSetStoredValue,\n        handleToggleNegative,\n        number,\n        storedNumber,\n        setNumber\n      }}\n    >\n      {props.children}\n    </NumberContext.Provider>\n  );\n};\n\nexport default NumberProvider;\n","import React, { useContext } from \"react\";\nimport { NumberContext } from \"./NumberProvider\";\n\nconst NumberButton = ({ buttonValue }) => {\n  const { handleSetDisplayValue } = useContext(NumberContext);\n\n  return (\n    <button type=\"button\" onClick={() => handleSetDisplayValue(buttonValue)}>\n      {buttonValue}\n    </button>\n  );\n};\n\nexport default NumberButton;\n","import React, { useContext } from \"react\";\nimport { NumberContext } from \"./NumberProvider\";\n\nconst FunctionButton = ({ buttonValue }) => {\n  const { handleSetCalcFunction } = useContext(NumberContext);\n  return (\n    <button onClick={() => handleSetCalcFunction(buttonValue)}>\n      {buttonValue}\n    </button>\n  );\n};\n\nexport default FunctionButton;\n","import React, { useContext } from \"react\";\nimport { NumberContext } from \"./NumberProvider\";\n\nconst ClearButton = () => {\n  const { handleClearValue } = useContext(NumberContext);\n  return <button onClick={handleClearValue}>Clear</button>;\n};\n\nexport default ClearButton;\n","import styled from \"styled-components\";\n\nexport const CalculatorStyles = styled.div`\n  background-color: dodgerblue;\n  max-width: 100%;\n  height: 100vh;\n  display: grid;\n  justify-items: center;\n  grid-template-areas:\n    \"display\"\n    \"numbers\";\n  button {\n    width: 100%;\n    height: 80px;\n    border-radius: 20px;\n    border: 3px solid white;\n    font-size: 2rem;\n    color: white;\n    font-family: \"Orbitron\", serif;\n    background: #e17055;\n    &:focus {\n      outline: none;\n    }\n  }\n  .display {\n    font-family: \"Orbitron\", serif;\n    font-weight: 700;\n    grid-area: display;\n    h1 {\n      font-size: 4rem;\n      color: white;\n      text-align: center;\n      margin: 40px 0;\n    }\n  }\n\n  .number-pad {\n    grid-area: numbers;\n    display: grid;\n    grid-gap: 10px;\n    grid-template-columns: repeat(4, 1fr);\n    padding: 0px 0px 30px;\n    width: 450px;\n    .button-div:focus {\n      outline: none;\n    }\n  }\n\n  .zero-button {\n    grid-column: 1/3;\n  }\n`;\n\nexport const DisplayStyles = styled.div`\n  display: grid;\n  grid-template-rows: 90px 50px;\n  grid-template-columns: 1fr;\n  border: 4px solid white;\n  margin: 10px;\n  width: 700px;\n  align-items: center;\n  border-radius: 20px;\n  background: #e17055;\n  h2, p {\n    text-align: center;\n    color: white;\n  }\n\n  h2 {\n    font-size: 3rem;\n    margin: 0;\n    text-align: right;\n    padding: 0px;\n    border-bottom: 4px solid white;\n    padding: 15px 20px;\n  }\n\n  p {\n    margin: 5px 0;\n  }\n`;\n","import React, { useContext } from \"react\";\nimport { NumberContext } from \"./NumberProvider\";\nimport { DisplayStyles } from \"./styles/Styles\";\n\nconst Display = () => {\n  const { number, storedNumber, functionType } = useContext(NumberContext);\n  return (\n    <DisplayStyles>\n      <h2>{!number.length && !storedNumber ? \"0\" : number || storedNumber}</h2>\n      <p>\n        {!storedNumber\n          ? \"ENTER SOME NUMBERS\"\n          : `${storedNumber} ${functionType} ${number}`}\n      </p>\n    </DisplayStyles>\n  );\n};\n\nexport default Display;\n","import React, { useContext } from \"react\";\nimport { NumberContext } from \"./NumberProvider\";\n\nconst EqualButton = () => {\n  const { doMath } = useContext(NumberContext);\n\n  return <button onClick={doMath}>=</button>;\n};\n\nexport default EqualButton;\n","import React, { useContext } from \"react\";\nimport { NumberContext } from \"./NumberProvider\";\n\nconst BackButton = () => {\n  const { handleBackButton } = useContext(NumberContext);\n  return <button onClick={handleBackButton}>Back</button>;\n};\n\nexport default BackButton;\n","import React, { useContext } from \"react\";\nimport { NumberContext } from \"./NumberProvider\";\n\nconst NegativeButton = () => {\n  const { handleToggleNegative } = useContext(NumberContext);\n\n  return <button onClick={handleToggleNegative}>-</button>;\n};\n\nexport default NegativeButton;\n","import React from \"react\";\nimport NumberButton from \"./NumberButton\";\nimport FunctionButton from \"./FunctionButton\";\nimport ClearButton from \"./ClearButton\";\nimport Display from \"./Display\";\nimport EqualButton from \"./EqualButton\";\nimport BackButton from \"./BackButton\";\nimport NegativeButton from \"./NegativeButton\";\nimport { CalculatorStyles } from \"./styles/Styles\";\n\nconst Calculator = () => (\n  <CalculatorStyles>\n    <div className=\"display\">\n      <h1>Calculator with Hooks</h1>\n      <Display />\n    </div>\n    <div className=\"number-pad\">\n      <ClearButton />\n      <BackButton />\n      <NegativeButton />\n      <FunctionButton buttonValue=\"/\" />\n      <NumberButton buttonValue={7} />\n      <NumberButton buttonValue={8} />\n      <NumberButton buttonValue={9} />\n      <FunctionButton buttonValue=\"*\" />\n      <NumberButton buttonValue={4} />\n      <NumberButton buttonValue={5} />\n      <NumberButton buttonValue={6} />\n      <FunctionButton buttonValue=\"-\" />\n      <NumberButton buttonValue={1} />\n      <NumberButton buttonValue={2} />\n      <NumberButton buttonValue={3} />\n      <FunctionButton buttonValue=\"+\" />\n      <div className=\"zero-button\">\n        <NumberButton buttonValue={0} />\n      </div>\n      <NumberButton buttonValue=\".\" />\n      <EqualButton />\n    </div>\n  </CalculatorStyles>\n);\n\nexport default Calculator;\n","import React from \"react\";\n\nimport Calculator from \"./components/Calculator\";\nimport NumberProvider from \"./components/NumberProvider\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <NumberProvider>\n        <Calculator />\n      </NumberProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}